// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package nbaData

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayerSalaries = `-- name: CreatePlayerSalaries :one
INSERT INTO nba_player_salaries (
  name, salary2025, salary2026, salary2027, salary2028, salary2029
) VALUES (
$1, $2, $3, $4, $5, $6
)
RETURNING id, name, salary2025, salary2026, salary2027, salary2028, salary2029
`

type CreatePlayerSalariesParams struct {
	Name       string
	Salary2025 pgtype.Text
	Salary2026 pgtype.Text
	Salary2027 pgtype.Text
	Salary2028 pgtype.Text
	Salary2029 pgtype.Text
}

func (q *Queries) CreatePlayerSalaries(ctx context.Context, arg CreatePlayerSalariesParams) (NbaPlayerSalary, error) {
	row := q.db.QueryRow(ctx, createPlayerSalaries,
		arg.Name,
		arg.Salary2025,
		arg.Salary2026,
		arg.Salary2027,
		arg.Salary2028,
		arg.Salary2029,
	)
	var i NbaPlayerSalary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Salary2025,
		&i.Salary2026,
		&i.Salary2027,
		&i.Salary2028,
		&i.Salary2029,
	)
	return i, err
}

const createTeamSalaries = `-- name: CreateTeamSalaries :one
INSERT INTO nba_team_salaries (
  name, salary2025, salary2026, salary2027, salary2028, salary2029
) VALUES (
$1, $2, $3, $4, $5, $6
)
RETURNING id, name, salary2025, salary2026, salary2027, salary2028, salary2029
`

type CreateTeamSalariesParams struct {
	Name       string
	Salary2025 pgtype.Text
	Salary2026 pgtype.Text
	Salary2027 pgtype.Text
	Salary2028 pgtype.Text
	Salary2029 pgtype.Text
}

func (q *Queries) CreateTeamSalaries(ctx context.Context, arg CreateTeamSalariesParams) (NbaTeamSalary, error) {
	row := q.db.QueryRow(ctx, createTeamSalaries,
		arg.Name,
		arg.Salary2025,
		arg.Salary2026,
		arg.Salary2027,
		arg.Salary2028,
		arg.Salary2029,
	)
	var i NbaTeamSalary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Salary2025,
		&i.Salary2026,
		&i.Salary2027,
		&i.Salary2028,
		&i.Salary2029,
	)
	return i, err
}

const getPlayersSalaries = `-- name: GetPlayersSalaries :many
SELECT id, name, salary2025, salary2026, salary2027, salary2028, salary2029 FROM nba_player_salaries
ORDER BY name
`

func (q *Queries) GetPlayersSalaries(ctx context.Context) ([]NbaPlayerSalary, error) {
	rows, err := q.db.Query(ctx, getPlayersSalaries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NbaPlayerSalary
	for rows.Next() {
		var i NbaPlayerSalary
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Salary2025,
			&i.Salary2026,
			&i.Salary2027,
			&i.Salary2028,
			&i.Salary2029,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayersSalaryByID = `-- name: GetPlayersSalaryByID :one
SELECT id, name, salary2025, salary2026, salary2027, salary2028, salary2029 FROM nba_player_salaries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlayersSalaryByID(ctx context.Context, id int64) (NbaPlayerSalary, error) {
	row := q.db.QueryRow(ctx, getPlayersSalaryByID, id)
	var i NbaPlayerSalary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Salary2025,
		&i.Salary2026,
		&i.Salary2027,
		&i.Salary2028,
		&i.Salary2029,
	)
	return i, err
}

const getTeamSalaryByID = `-- name: GetTeamSalaryByID :one
SELECT id, name, salary2025, salary2026, salary2027, salary2028, salary2029 FROM nba_team_salaries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeamSalaryByID(ctx context.Context, id int64) (NbaTeamSalary, error) {
	row := q.db.QueryRow(ctx, getTeamSalaryByID, id)
	var i NbaTeamSalary
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Salary2025,
		&i.Salary2026,
		&i.Salary2027,
		&i.Salary2028,
		&i.Salary2029,
	)
	return i, err
}

const getTeamsSalaries = `-- name: GetTeamsSalaries :many
SELECT id, name, salary2025, salary2026, salary2027, salary2028, salary2029 FROM nba_team_salaries
ORDER BY name
`

func (q *Queries) GetTeamsSalaries(ctx context.Context) ([]NbaTeamSalary, error) {
	rows, err := q.db.Query(ctx, getTeamsSalaries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NbaTeamSalary
	for rows.Next() {
		var i NbaTeamSalary
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Salary2025,
			&i.Salary2026,
			&i.Salary2027,
			&i.Salary2028,
			&i.Salary2029,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
